<?php

namespace App\Controller\Admin;

use App\Entity\Product;
use Doctrine\ORM\EntityManagerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Context\AdminContext;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\ArrayField;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\BooleanField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ChoiceField;
use EasyCorp\Bundle\EasyAdminBundle\Field\DateField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ImageField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IntegerField;
use EasyCorp\Bundle\EasyAdminBundle\Field\MoneyField;
use EasyCorp\Bundle\EasyAdminBundle\Field\NumberField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use EasyCorp\Bundle\EasyAdminBundle\Router\AdminUrlGenerator;
use Symfony\Component\HttpFoundation\Response;

class ProductCrudController extends AbstractCrudController
{
    public static function getEntityFqcn(): string
    {
        return Product::class;
    }

    public function configureCrud(Crud $crud): Crud
    {
        return $crud
            // the labels used to refer to this entity in titles, buttons, etc.
            ->setEntityLabelInSingular('Référence')
            ->setEntityLabelInPlural('Références')
            ->setDefaultSort(['reference' => 'DESC'])
            ;
    }


    public function configureFields(string $pageName): iterable
    {
        return [
            TextField::new('reference', 'Référence'),
            TextField::new('title', 'Titre')->hideOnIndex(),
            MoneyField::new('price', 'Prix HT')->setCurrency('EUR'),
            ChoiceField::new('tva', 'TVA')->hideOnIndex()->setChoices([
                // $value => $badgeStyleName
                '20%' => '1.20',
                '10%' => '1.10',
                '5%' => '1.05',
                '0%' => '0',
            ]),
            IntegerField::new('stock', 'Stock'),
            AssociationField::new('productSheet', 'Fiche produit'),
            BooleanField::new('activ', 'Activé'),
            BooleanField::new('principal', 'Référence principal'),
            ImageField::new('image_1', 'Image 1')
                ->setBasePath('upload/images/products')
                ->setUploadDir('public/upload/images/products')
                ->setSortable(false),
            ImageField::new('image_2', 'Image 2')
                ->setBasePath('upload/images/products')
                ->setUploadDir('public/upload/images/products')
                ->hideOnIndex(),
            ImageField::new('image_3', 'Image 3')
                ->setBasePath('upload/images/products')
                ->setUploadDir('public/upload/images/products')
                ->hideOnIndex(),
            ImageField::new('image_4', 'Image 4')
                ->setBasePath('upload/images/products')
                ->setUploadDir('public/upload/images/products')
                ->hideOnIndex(),
            TextField::new('keywork', 'Mot clés')->hideOnIndex()->setHelp('Séparer chaque mot d\'une virgule'),
            DateField::new('createAt', 'Créé le')->hideOnForm(),
            DateField::new('updateAt', 'Mis à jour le')->hideOnForm(),
        ];
    }

    public function persistEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        $entityInstance->setTva((float) $entityInstance->getTva());
        $entityInstance->setReference(strtoupper($entityInstance->getReference()));

        parent::persistEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
    }

    public function configureActions(Actions $actions): Actions
    {
        $duplicate = Action::new('Dupliquer')->linkToCrudAction('duplicate')->setCssClass('btn btn-info');

        return $actions
            ->add(Crud::PAGE_EDIT, $duplicate)
            ->add(Crud::PAGE_DETAIL, $duplicate)
            ->add(Crud::PAGE_INDEX, $duplicate)
            ->add(Crud::PAGE_EDIT, Action::DELETE)
            ->add(Crud::PAGE_EDIT, Action::INDEX)
            ->add(Crud::PAGE_NEW, Action::INDEX)
            ->add(Crud::PAGE_INDEX, Action::DETAIL)
            ->reorder(Action::DETAIL, [Action::INDEX, 'Dupliquer', Action::EDIT, Action::DELETE])
            ->reorder(Action::EDIT, [Action::INDEX, 'Dupliquer', Action::SAVE_AND_CONTINUE, Action::SAVE_AND_RETURN, Action::DELETE])
            ;
    }

    public function duplicate(AdminContext $context, EntityManagerInterface $entityManager, AdminUrlGenerator $adminUrlGenerator): Response
    {
        $elm = $context->getEntity()->getInstance();

        $duplicate = clone $elm;

        parent::persistEntity($entityManager, $duplicate);

        $url = $adminUrlGenerator->setController(self::class)
            ->setAction(Action::DETAIL)
            ->setEntityId($duplicate->getId())
            ->generateUrl();

        return $this->redirect($url);
    }
}
